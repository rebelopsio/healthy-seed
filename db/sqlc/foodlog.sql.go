// Code generated by sqlc. DO NOT EDIT.
// source: foodlog.sql

package db

import (
	"context"
)

const createFoodlog = `-- name: CreateFoodlog :one
INSERT INTO foodlog (
    account_id,
    calories,
    protein,
    carbs,
    fat
) VALUES (
     $1, $2, $3, $4, $5
 ) RETURNING id, account_id, calories, protein, fat, carbs, created_at
`

type CreateFoodlogParams struct {
	AccountID int64 `json:"account_id"`
	Calories  int32 `json:"calories"`
	Protein   int32 `json:"protein"`
	Carbs     int32 `json:"carbs"`
	Fat       int32 `json:"fat"`
}

func (q *Queries) CreateFoodlog(ctx context.Context, arg CreateFoodlogParams) (Foodlog, error) {
	row := q.db.QueryRowContext(ctx, createFoodlog,
		arg.AccountID,
		arg.Calories,
		arg.Protein,
		arg.Carbs,
		arg.Fat,
	)
	var i Foodlog
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Calories,
		&i.Protein,
		&i.Fat,
		&i.Carbs,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFoodlog = `-- name: DeleteFoodlog :exec
DELETE FROM foodlog
WHERE id = $1
`

func (q *Queries) DeleteFoodlog(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFoodlog, id)
	return err
}

const getFoodlog = `-- name: GetFoodlog :one
SELECT id, account_id, calories, protein, fat, carbs, created_at FROM foodlog
WHERE id = $1
`

func (q *Queries) GetFoodlog(ctx context.Context, id int64) (Foodlog, error) {
	row := q.db.QueryRowContext(ctx, getFoodlog, id)
	var i Foodlog
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Calories,
		&i.Protein,
		&i.Fat,
		&i.Carbs,
		&i.CreatedAt,
	)
	return i, err
}

const listFoodlogs = `-- name: ListFoodlogs :many
SELECT id, account_id, calories, protein, fat, carbs, created_at FROM foodlog
WHERE account_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListFoodlogsParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListFoodlogs(ctx context.Context, arg ListFoodlogsParams) ([]Foodlog, error) {
	rows, err := q.db.QueryContext(ctx, listFoodlogs, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Foodlog
	for rows.Next() {
		var i Foodlog
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Calories,
			&i.Protein,
			&i.Fat,
			&i.Carbs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFoodlog = `-- name: UpdateFoodlog :exec
UPDATE foodlog
SET protein = $2, fat = $3, carbs = $4
WHERE id = $1
`

type UpdateFoodlogParams struct {
	ID      int64 `json:"id"`
	Protein int32 `json:"protein"`
	Fat     int32 `json:"fat"`
	Carbs   int32 `json:"carbs"`
}

func (q *Queries) UpdateFoodlog(ctx context.Context, arg UpdateFoodlogParams) error {
	_, err := q.db.ExecContext(ctx, updateFoodlog,
		arg.ID,
		arg.Protein,
		arg.Fat,
		arg.Carbs,
	)
	return err
}
