// Code generated by sqlc. DO NOT EDIT.
// source: exercise.sql

package db

import (
	"context"
	"database/sql"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercise (
    account_id,
    type,
    calories_burned,
    start_time,
    stop_time
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, account_id, start_time, stop_time, type, calories_burned, created_at
`

type CreateExerciseParams struct {
	AccountID      sql.NullInt64  `json:"account_id"`
	Type           sql.NullString `json:"type"`
	CaloriesBurned sql.NullInt32  `json:"calories_burned"`
	StartTime      sql.NullTime   `json:"start_time"`
	StopTime       sql.NullTime   `json:"stop_time"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise,
		arg.AccountID,
		arg.Type,
		arg.CaloriesBurned,
		arg.StartTime,
		arg.StopTime,
	)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.StartTime,
		&i.StopTime,
		&i.Type,
		&i.CaloriesBurned,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercise
WHERE id = $1
`

func (q *Queries) DeleteExercise(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, id)
	return err
}

const getExercise = `-- name: GetExercise :one
SELECT id, account_id, start_time, stop_time, type, calories_burned, created_at FROM exercise
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExercise(ctx context.Context, id int64) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExercise, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.StartTime,
		&i.StopTime,
		&i.Type,
		&i.CaloriesBurned,
		&i.CreatedAt,
	)
	return i, err
}

const listExercise = `-- name: ListExercise :many
SELECT id, account_id, start_time, stop_time, type, calories_burned, created_at FROM exercise
WHERE account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListExerciseParams struct {
	AccountID sql.NullInt64 `json:"account_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListExercise(ctx context.Context, arg ListExerciseParams) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, listExercise, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.StartTime,
			&i.StopTime,
			&i.Type,
			&i.CaloriesBurned,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :exec
UPDATE exercise
SET start_time = $2, stop_time = $3, type = $4, calories_burned = $5
WHERE id = $1
`

type UpdateExerciseParams struct {
	ID             int64          `json:"id"`
	StartTime      sql.NullTime   `json:"start_time"`
	StopTime       sql.NullTime   `json:"stop_time"`
	Type           sql.NullString `json:"type"`
	CaloriesBurned sql.NullInt32  `json:"calories_burned"`
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error {
	_, err := q.db.ExecContext(ctx, updateExercise,
		arg.ID,
		arg.StartTime,
		arg.StopTime,
		arg.Type,
		arg.CaloriesBurned,
	)
	return err
}
